

-- НЕ ЗАБЫВАЙ ОПИСЫВАТЬ ТО, ЧТО ДЕЛАЕШЬ И ЗАЧЕМ ТЫ ЭТО ДЕЛАЕШЬ!!!



-- Задание №1: В каких городах больше одного аэропорта?
select city as "Город", count(airport_code) as "Количество аэропортов" -- выбрать столбцы city и посчитать кол-во аэропортов
from airports -- из таблицы airports
group by city -- группируем по городам
having count(airport_code) > 1 -- делаем отбор, где код аэропорта повторяется (также можно сделать отбор и по городу)

-- Задание №2: В каких аэропортах есть рейсы, выполняемые самолетом с максимальной дальностью перелета? Д/б подзапрос.

select distinct f.departure_airport as "Код аэропорта", a.airport_name as "Название аэропорта" -- убираем задвоения, выбираем код отправки и имя аэропорта
from flights f  -- из таблицы с рейсами
join airports a on a.airport_code = f.departure_airport -- добавляем в таблицу данные из таблицы с аэропортами по коду аэропорта
where aircraft_code = ( -- ищем с фильтром по нужному коду самолета
		select aircraft_code -- отбираем нужный нам код самолета
		from aircrafts -- из таблицы с самолетами
		where  "range" = (select max("range") from aircrafts) -- по максимальной дальности полета
	)

-- Задание №3: Вывести 10 рейсов с максимальным временем задержки вылета Д/б оператор LIMIT

select flight_no as "Номер рейса", scheduled_departure as "Вылет - план", actual_departure as "Вылет - факт", 
	actual_departure - scheduled_departure as "Время задержки" -- выбираем часть столбцов, вычислить разницу между фактическим временем отправления и плановым
from flights f -- из таблицы с рейсами
where actual_departure is not null -- где данные не содержат NULL
order by "Время задержки" desc limit 10 -- сгруппировать по вычисляемому столбцу от большего к меньшему и показать первые 10 значений

-- Задание №4: Были ли брони, по которым не были получены посадочные талоны? Д/б Верный тип JOIN

select count(b.book_ref) as "Количество броней" -- считаем кол-во броней
from bookings b -- из таблицы с бронями
join tickets t on t.book_ref = b.book_ref -- обогощаем нашу таблицу данными с номерами билетов
left join boarding_passes bp on bp.ticket_no = t.ticket_no -- обогощаем нашу таблицу данными по посадочным талонам, но чтобы остались пустые значения из предыдущих таблиц 
where bp.boarding_no is null -- отбираем только пустые значение, т.е. те, по которым нет посадочных талонов

-- Задание №5: Найдите количество свободных мест для каждого рейса, их % отношение к общему количеству мест в самолете.
-- 5.1 Добавьте столбец с накопительным итогом - суммарное накопление количества вывезенных пассажиров из каждого аэропорта на каждый день. 
-- Т.е. в этом столбце должна отражаться накопительная сумма - сколько человек уже вылетело из данного аэропорта на этом или более ранних 
-- рейсах в течении дня.
-- Д/б Оконная функция, Подзапросы или/и cte.

-- Я не понял тему с СТЕ... уже всю голову сломал, не понимаю... Буду благодарен за доп.материал по этой теме

-- Задание №6: Найдите процентное соотношение перелетов по типам самолетов от общего количества. Д/б Подзапрос или окно, Оператор ROUND.

select a.model as "Тип самолета", -- выбираем тип самолета из таблицы с самолетами
	count(f.flight_id) as "Перелёты, шт.", -- считаем количество переоетов, совершенных каждым типом самолета
	round(count(f.flight_id) / -- через подзапрос находим отношение каждого отдельного перелета к общему количеству перелетов
		(select count(f.flight_id) -- подзапрос, чтобы поместить в знаменатель общее количество перелетов (16 773 шт.)
		from flights f -- из таблицы с полетами
		where f.actual_departure is not null -- исключаем из расчета рейсы, которые не вылетели из аэропорта
		)::numeric * 100, 2) as "Соотношение перелетов, %" -- приводим к вещественному числу (если не привести к типу numeric, то не перевести в % (не умножить на 100)), умножаем на 100 (чтобы из долей сделать проценты) с 2 знаками после запятой 
from aircrafts a -- из таблицы с самолетами
join flights f on f.aircraft_code = a.aircraft_code -- обогощаем таблицу с самолетами данными из таблицы с полетами по коду самолета
where f.actual_departure is not null -- исключаем рейсы, которые не вылетели
group by a.model -- группируем по моделе самолета

-- Задание №7: Были ли города, в которые можно  добраться бизнес - классом дешевле, чем эконом-классом в рамках перелета? Д/б CTE

-- Я не понял тему с СТЕ... уже всю голову сломал, не понимаю... Буду благодарен за доп.материал по этой теме

-- Задание №8: Между какими городами нет прямых рейсов? 
-- Д/б Декартово произведение в предложении FROM; 
-- Д/б Самостоятельно созданные представления (если облачное подключение, то без представления);
-- Д/б Оператор EXCEPT

create view cities as -- делаем представление
select distinct -- исключаем задвоения
	a.city as "Город отправления", 
	a2.city as "Город прибытия"
from flights f -- из таблицы с рейсами
join airports a on f.departure_airport = a.airport_code -- обогощаем таблицу данными по наименованию аэропортов отправления
join airports a2 on f.arrival_airport = a2.airport_code -- обогощаем таблицу данными по наименованию аэропортов прибытия
 
select distinct -- выбираем уникальные значения
	a.city as "Город отправления",
	a2.city as "Город прибытия" 
from airports a, airports a2 -- декартово произведение
where a.city != a2.city -- исключаем задвоение
except -- за исключением тех, что мы выбираем из созданного представления cities
select * from cities -- выбираем все из созданного нами представления

-- Задание №9: Вычислите расстояние между аэропортами, связанными прямыми рейсами, сравните с допустимой максимальной дальностью перелетов  
-- в самолетах, обслуживающих эти рейсы. Д/б Оператор RADIANS или использование sind/cosd и CASE.

select distinct ad.airport_name as "Откуда", aa.airport_name as "Куда", a."range" as "Дальность полета",
	acos(sind(ad.latitude) * sind(aa.latitude) + cosd(ad.latitude) * cosd(aa.latitude) * cosd(ad.longitude - aa.longitude)) * 6371 as "Расстояние",
case when -- запускаем условную конструкцию для того, чтобы проверить, долетит ли самолет до аэропорта назначения или нет
		a."range" >
		acos(sind(ad.latitude) * sind(aa.latitude) + cosd(ad.latitude) * cosd(aa.latitude) * cosd(ad.longitude - aa.longitude)) * 6371 
	then 'Долетит'
	else 'Не долетит'
	end as "Результат"
from flights f -- получаем данные из таблицы полеты
join airports ad on f.departure_airport = ad.airport_code -- обогощаем таблицу наименованием аэропортов отправления
join airports aa on f.arrival_airport = aa.airport_code -- обогощаем таблицу наименованием аэропортов назначения
join aircrafts a on a.aircraft_code = f.aircraft_code -- обогощаем таблицу полеты данными по самолетам
